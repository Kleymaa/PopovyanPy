import telebot
from telebot import types
import random
from datetime import datetime, timedelta
import time
import threading

bot = telebot.TeleBot('7640686137:AAFxTV_Y5xLY1ShdKyvgFWxG9iZh00eBwgY')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
giveaways = {}
participants = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
def check_giveaways():
    while True:
        try:
            now = datetime.now()
            ended_giveaways = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
            for giveaway_id, giveaway in list(giveaways.items()):
                if 'end_date' in giveaway and now >= giveaway['end_date']:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        if len(giveaway['participants']) >= giveaway.get('min_participants', 1):
                            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
                            winners_count = min(giveaway['winners_count'], len(giveaway['participants']))
                            winners = random.sample(giveaway['participants'], winners_count)
                            giveaway['winners'] = [
                                f"@{bot.get_chat(user_id).username}" if bot.get_chat(
                                    user_id).username else f"user_{user_id}"
                                for user_id in winners
                            ]

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
                            winners_list = "\n".join([f"üéñ {winner}" for winner in giveaway['winners']])
                            result_message = (
                                f"üèÜ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–ó–´–ì–†–´–®–ê** üéâ\n\n"
                                f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n"
                                f"üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_list}\n\n"
                                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéâ"
                            )

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–∞–Ω–∞–ª—ã
                            for channel in giveaway['channels']:
                                try:
                                    bot.send_message(channel['id'], result_message, parse_mode="Markdown")
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª {channel['title']}: {e}")

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            try:
                                bot.send_message(
                                    giveaway['admin'],
                                    f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n\n{winners_list}"
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                        else:
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            try:
                                bot.send_message(
                                    giveaway['admin'],
                                    f"‚ö†Ô∏è –†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ "
                                    f"(—Ç—Ä–µ–±—É–µ—Ç—Å—è: {giveaway['min_participants']}, "
                                    f"—É—á–∞—Å—Ç–≤—É–µ—Ç: {len(giveaway['participants'])})."
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

                        # –ü–æ–º–µ—á–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        ended_giveaways.append(giveaway_id)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id}: {e}")

            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
            for giveaway_id in ended_giveaways:
                if giveaway_id in giveaways:
                    del giveaways[giveaway_id]

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        time.sleep(60)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=check_giveaways, daemon=True).start()


# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.type in ['group', 'supergroup', 'channel']:
        bot.send_message(message.chat.id,
                         "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_giveaway –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à.")
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —á–µ—Ä–µ–∑ start
        if len(message.text.split()) > 1 and message.text.split()[1].startswith('giveaway_'):
            giveaway_id = int(message.text.split()[1].split('_')[1])
            participate_in_giveaway(message, giveaway_id)
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
        btn2 = types.KeyboardButton("üìä –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö!",
                         reply_markup=markup)


def participate_in_giveaway(message, giveaway_id):
    try:
        if giveaway_id in giveaways:
            if message.from_user.id not in giveaways[giveaway_id]['participants']:
                giveaways[giveaway_id]['participants'].append(message.from_user.id)
                bot.send_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
            else:
                bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


@bot.message_handler(commands=['new_giveaway'])
def new_giveaway_command(message):
    if message.chat.type in ['group', 'supergroup', 'channel']:
        bot.send_message(message.chat.id,
                         "‚ÑπÔ∏è –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @your_bot_username")
    else:
        start_giveaway_creation(message)


def start_giveaway_creation(message):
    try:
        msg = bot.send_message(message.chat.id,
                               "üéâ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ (—á—Ç–æ –≤—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç–µ):")
        bot.register_next_step_handler(msg, process_prize_name)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")


def process_prize_name(message):
    try:
        chat_id = message.chat.id
        giveaways[chat_id] = {
            'prize': message.text,
            'admin': message.from_user.id,
            'channels': [],
            'participants': [],
            'winners': []
        }

        msg = bot.send_message(chat_id, "üî¢ –°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞? (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
        bot.register_next_step_handler(msg, process_min_participants)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


def process_min_participants(message):
    try:
        chat_id = message.chat.id
        min_participants = int(message.text)

        if min_participants < 2:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - 2")

        giveaways[chat_id]['min_participants'] = min_participants

        msg = bot.send_message(chat_id, "üèÜ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?")
        bot.register_next_step_handler(msg, process_winners_count)
    except ValueError:
        msg = bot.send_message(chat_id,
                               "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 2). –°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞?")
        bot.register_next_step_handler(msg, process_min_participants)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


def process_winners_count(message):
    try:
        chat_id = message.chat.id
        winners_count = int(message.text)

        if winners_count < 1:
            raise ValueError("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –ø–æ–±–µ–¥–∏—Ç–µ–ª—å")

        giveaways[chat_id]['winners_count'] = winners_count

        msg = bot.send_message(chat_id,
                               "üìÖ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à? (–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 31.12.2023 23:59)")
        bot.register_next_step_handler(msg, process_end_date)
    except ValueError:
        msg = bot.send_message(chat_id,
                               "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 1). –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?")
        bot.register_next_step_handler(msg, process_winners_count)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


def process_end_date(message):
    try:
        chat_id = message.chat.id
        end_date_str = message.text

        end_date = datetime.strptime(end_date_str, "%d.%m.%Y %H:%M")
        giveaways[chat_id]['end_date'] = end_date

        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
        markup.add(btn)

        bot.send_message(chat_id, f"‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                                  f"üéÅ –ü—Ä–∏–∑: {giveaways[chat_id]['prize']}\n"
                                  f"üë• –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {giveaways[chat_id]['min_participants']}\n"
                                  f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaways[chat_id]['winners_count']}\n"
                                  f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date_str}\n\n"
                                  f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à:",
                         reply_markup=markup)
    except ValueError:
        msg = bot.send_message(chat_id,
                               "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 31.12.2023 23:59")
        bot.register_next_step_handler(msg, process_end_date)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "add_channel")
def add_channel_callback(call):
    try:
        msg = bot.send_message(call.message.chat.id,
                               "üì¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª –∏ –≤—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞):")
        bot.register_next_step_handler(msg, process_channel_addition)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


def process_channel_addition(message):
    try:
        chat_id = message.chat.id
        giveaway = giveaways.get(chat_id)

        if not giveaway:
            raise ValueError("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if message.forward_from_chat and message.forward_from_chat.type == "channel":
            channel_id = message.forward_from_chat.id
            channel_title = message.forward_from_chat.title
        elif message.text.startswith("@"):
            channel_id = message.text[1:]
            channel_title = message.text
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞")

        try:
            chat_member = bot.get_chat_member(channel_id if isinstance(channel_id, int) else f"@{channel_id}",
                                              bot.get_me().id)
            if chat_member.status not in ["administrator", "creator"]:
                raise ValueError("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞")
        except:
            raise ValueError("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        giveaway['channels'].append({
            'id': channel_id,
            'title': channel_title
        })

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", callback_data="add_channel")
        btn2 = types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="finish_setup")
        markup.add(btn1, btn2)

        channels_list = "\n".join([f"üì¢ {ch['title']}" for ch in giveaway['channels']])

        bot.send_message(chat_id, f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n{channels_list}", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        start_giveaway_creation(message)


@bot.callback_query_handler(func=lambda call: call.data == "finish_setup")
def finish_setup_callback(call):
    try:
        chat_id = call.message.chat.id
        giveaway = giveaways.get(chat_id)

        if not giveaway or not giveaway.get('channels'):
            bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω.")
            return

        giveaway_post = f"üéâ **–†–û–ó–´–ì–†–´–®** üéÅ\n\n" \
                        f"üèÜ –ü—Ä–∏–∑: {giveaway['prize']}\n" \
                        f"üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaway['winners_count']}\n" \
                        f"‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: {giveaway['end_date'].strftime('%d.%m.%Y %H:%M')}\n\n" \
                        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"

        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
                                         url=f"https://t.me/{bot.get_me().username}?start=giveaway_{chat_id}")
        markup.add(btn)

        for channel in giveaway['channels']:
            try:
                bot.send_message(channel['id'], giveaway_post, reply_markup=markup, parse_mode="Markdown")
            except Exception as e:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ {channel['title']}: {e}")

        bot.send_message(chat_id,
                         "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö! –Ø —Å–æ–æ–±—â—É –≤–∞–º, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.")
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")


@bot.message_handler(func=lambda message: message.text == "üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
def create_giveaway(message):
    start_giveaway_creation(message)


@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
def my_giveaways(message):
    try:
        user_giveaways = []
        for giveaway_id, giveaway in giveaways.items():
            if giveaway['admin'] == message.from_user.id:
                channels = ", ".join([ch['title'] for ch in giveaway['channels']])
                user_giveaways.append(
                    f"üéÅ {giveaway['prize']}\n"
                    f"üì¢ –ö–∞–Ω–∞–ª—ã: {channels}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(giveaway['participants'])}\n"
                    f"‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: {giveaway['end_date'].strftime('%d.%m.%Y %H:%M')}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: https://t.me/{bot.get_me().username}?start=giveaway_{giveaway_id}\n"
                )

        if user_giveaways:
            bot.send_message(message.chat.id, "üìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:\n\n" + "\n\n".join(user_giveaways))
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")


@bot.message_handler(commands=['draw_winners'])
def draw_winners(message):
    try:
        chat_id = message.chat.id
        giveaway = giveaways.get(chat_id)

        if not giveaway:
            bot.send_message(chat_id, "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if datetime.now() < giveaway['end_date']:
            bot.send_message(chat_id,
                             f"‚ö†Ô∏è –†–æ–∑—ã–≥—Ä—ã—à –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –û–∫–æ–Ω—á–∞–Ω–∏–µ: {giveaway['end_date'].strftime('%d.%m.%Y %H:%M')}")
            return

        if len(giveaway['participants']) < giveaway['min_participants']:
            bot.send_message(chat_id,
                             f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {giveaway['min_participants']}, —É—á–∞—Å—Ç–≤—É–µ—Ç: {len(giveaway['participants'])}). –†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        winners = random.sample(giveaway['participants'], min(giveaway['winners_count'], len(giveaway['participants'])))
        giveaway['winners'] = [
            f"@{bot.get_chat(user_id).username}" if bot.get_chat(user_id).username else f"user_{user_id}" for user_id in
            winners]

        winners_list = "\n".join([f"üéñ {winner}" for winner in giveaway['winners']])

        result_message = f"üèÜ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–ó–´–ì–†–´–®–ê** üéâ\n\n" \
                         f"üéÅ –ü—Ä–∏–∑: {giveaway['prize']}\n" \
                         f"üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_list}\n\n" \
                         f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéâ"

        for channel in giveaway['channels']:
            try:
                bot.send_message(channel['id'], result_message, parse_mode="Markdown")
            except Exception as e:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–∞–Ω–∞–ª {channel['title']}: {e}")

        bot.send_message(chat_id, f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤—ã–±—Ä–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö!\n\n{winners_list}")
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)